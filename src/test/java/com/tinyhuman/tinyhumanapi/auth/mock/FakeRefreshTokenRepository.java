package com.tinyhuman.tinyhumanapi.auth.mock;

import com.tinyhuman.tinyhumanapi.auth.domain.RefreshToken;
import com.tinyhuman.tinyhumanapi.auth.service.port.RefreshTokenRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<RefreshToken> data = new ArrayList<>();

    @Override
    public RefreshToken save(RefreshToken refreshToken) {
        if (refreshToken.id() == null || refreshToken.id() == 0) {
            RefreshToken newRefreshToken = RefreshToken.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .userId(refreshToken.userId())
                    .refreshToken(refreshToken.refreshToken())
                    .build();
            data.add(newRefreshToken);

            return newRefreshToken;
        } else {
            data.removeIf(d -> Objects.equals(d.id(), refreshToken.id()));
            data.add(refreshToken);
            return refreshToken;
        }
    }

    @Override
    public Optional<RefreshToken> findByUserId(Long userId) {
        return  data.stream()
                .filter(d -> d.userId().equals(userId))
                .findAny();
    }

    @Override
    public Optional<RefreshToken> findByRefreshToken(String refreshToken) {
        return data.stream()
                .filter(d -> d.refreshToken().equals(refreshToken))
                .findAny();
    }

}
