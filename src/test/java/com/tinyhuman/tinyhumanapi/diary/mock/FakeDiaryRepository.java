package com.tinyhuman.tinyhumanapi.diary.mock;

import com.tinyhuman.tinyhumanapi.baby.domain.Baby;
import com.tinyhuman.tinyhumanapi.diary.domain.Diary;
import com.tinyhuman.tinyhumanapi.diary.service.port.DiaryRepository;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeDiaryRepository implements DiaryRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<Diary> data = new ArrayList<>();
    @Override
    public Diary save(Diary diary) {
        if (diary.id() == null || diary.id() == 0) {
            Diary newDiary = Diary.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .baby(diary.baby())
                    .daysAfterBirth(diary.daysAfterBirth())
                    .user(diary.user())
                    .isDeleted(diary.isDeleted())
                    .likeCount(diary.likeCount())
                    .date(diary.date())
                    .sentences(diary.sentences())
                    .pictures(diary.pictures())
                    .build();

            data.add(newDiary);

            return newDiary;
        } else {
            data.removeIf(d -> Objects.equals(d.id(), diary.id()));
            data.add(diary);
            return diary;
        }
    }

    @Override
    public Optional<Diary> findById(Long id) {
        return  data.stream()
                .filter(d -> d.id().equals(id))
                .findAny();
    }

    @Override
    public List<Diary> findByDate(LocalDate date, Long userId, Long babyId) {
        return data.stream()
                .filter(d -> d.date().equals(date))
                .toList();
    }

    @Override
    public List<Diary> findByBaby(Baby baby) {
        return data.stream()
                .filter(d -> d.baby().id().equals(baby.id()))
                .toList();
    }

    @Override
    public List<Diary> findByBabyId(Long babyId) {
        return data.stream()
                .filter(d -> d.baby().id().equals(babyId))
                .toList();
    }

    public FakeDiaryRepository() {
    }
}
