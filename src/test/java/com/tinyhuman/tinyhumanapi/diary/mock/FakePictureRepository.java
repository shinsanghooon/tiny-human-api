package com.tinyhuman.tinyhumanapi.diary.mock;

import com.tinyhuman.tinyhumanapi.diary.domain.Diary;
import com.tinyhuman.tinyhumanapi.diary.domain.Picture;
import com.tinyhuman.tinyhumanapi.diary.service.port.PictureRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakePictureRepository implements PictureRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<Picture> data = new ArrayList<>();

    @Override
    public List<Picture> saveAll(List<Picture> pictures, Diary savedDiary) {

        List<Picture> newPictures = new ArrayList<>();

        for (Picture picture : pictures) {
            if (picture.id() == null || picture.id() == 0) {
                Picture newPicture = Picture.builder()
                        .id(autoGeneratedId.incrementAndGet())
                        .isMainPicture(picture.isMainPicture())
                        .contentType(picture.contentType())
                        .keyName(picture.keyName())
                        .preSignedUrl(picture.preSignedUrl())
                        .diaryId(picture.diaryId())
                        .build();
                data.add(newPicture);
                newPictures.add(newPicture);
            } else {
                data.removeIf(s -> Objects.equals(s.id(), picture.id()));
                Picture newPicture = Picture.builder()
                        .id(picture.id())
                        .isMainPicture(picture.isMainPicture())
                        .contentType(picture.contentType())
                        .keyName(picture.keyName())
                        .preSignedUrl(picture.preSignedUrl())
                        .diaryId(picture.diaryId())
                        .build();
                data.add(newPicture);
                newPictures.add(newPicture);
            }
        }

        return newPictures;
    }

    @Override
    public Picture save(Picture picture, Diary diary) {
        Picture newPicture = Picture.builder()
                .id(picture.id())
                .isMainPicture(picture.isMainPicture())
                .fileName(picture.fileName())
                .diaryId(picture.diaryId())
                .isDeleted(picture.isDeleted())
                .build();

        data.removeIf(s -> Objects.equals(s.id(), picture.id()));
        data.add(newPicture);

        List<Picture> pictures = diary.pictures();
        pictures.removeIf(p -> Objects.equals(p.id(), picture.id()));
        pictures.add(newPicture);

        return newPicture;
    }

    @Override
    public Optional<Picture> findById(Long id) {
        return data.stream()
                .filter(d -> d.id().equals(id))
                .findAny();
    }
}
