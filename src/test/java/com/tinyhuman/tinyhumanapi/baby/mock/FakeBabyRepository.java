package com.tinyhuman.tinyhumanapi.baby.mock;

import com.tinyhuman.tinyhumanapi.baby.domain.Baby;
import com.tinyhuman.tinyhumanapi.baby.service.port.BabyRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeBabyRepository implements BabyRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<Baby> data = new ArrayList<>();

    @Override
    public Baby save(Baby baby) {
        if (baby.id() == null || baby.id() == 0) {
            Baby newBaby = Baby.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(baby.name())
                    .gender(baby.gender())
                    .nickName(baby.nickName())
                    .timeOfBirth(baby.timeOfBirth())
                    .dayOfBirth(baby.dayOfBirth())
                    .profileImgKeyName(baby.profileImgKeyName())
                    .isDeleted(false)
                    .build();
            data.add(newBaby);
            return newBaby;
        } else {
            data.removeIf(b -> Objects.equals(b.id(), baby.id()));
            data.add(baby);
            return baby;
        }
    }

    @Override
    public Optional<Baby> findById(Long id) {
        return data.stream()
                .filter(baby -> baby.id().equals(id))
                .filter(baby -> !baby.isDeleted())
                .findAny();
    }

    @Override
    public void delete(Long id) {

    }

}
