package com.tinyhuman.tinyhumanapi.album.mock;

import com.tinyhuman.tinyhumanapi.album.domain.Album;
import com.tinyhuman.tinyhumanapi.album.service.port.AlbumRepository;
import com.tinyhuman.tinyhumanapi.common.exception.ResourceNotFoundException;
import com.tinyhuman.tinyhumanapi.common.utils.CursorRequest;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeAlbumRepository implements AlbumRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0L);

    private final List<Album> data = new ArrayList<>();

    @Override
    public List<Album> saveAll(List<Album> albums) {
        List<Album> newAlbums = new ArrayList<>();

        for (Album album : albums) {

            if (album.id() == null || album.id() == 0) {
                Album newAlbum = Album.builder()
                        .id(autoGeneratedId.incrementAndGet())
                        .babyId(album.babyId())
                        .contentType(album.contentType())
                        .keyName(album.keyName())
                        .originalCreatedAt(album.originalCreatedAt())
                        .gpsLat(album.gpsLat())
                        .gpsLon(album.gpsLon())
                        .isDeleted(album.isDeleted())
                        .build();

                data.add(newAlbum);
                newAlbums.add(newAlbum);
            } else {
                data.removeIf(s -> Objects.equals(s.id(), album.id()));

                Album newAlbum = Album.builder()
                        .id(album.id())
                        .babyId(album.babyId())
                        .contentType(album.contentType())
                        .keyName(album.keyName())
                        .originalCreatedAt(album.originalCreatedAt())
                        .gpsLat(album.gpsLat())
                        .gpsLon(album.gpsLon())
                        .isDeleted(album.isDeleted())
                        .build();

                data.add(newAlbum);
                newAlbums.add(newAlbum);
            }
        }

        return newAlbums;
    }

    @Override
    public List<Album> findAllByIds(List<Long> ids) {
        return data.stream()
                .filter(a -> ids.contains(a.id()))
                .filter(a -> !a.isDeleted())
                .toList();
    }

    @Override
    public Album findByIdAndBabyId(Long id, Long babyId) {
        return data.stream()
                .filter(a -> a.id().equals(id) && a.babyId().equals(babyId))
                .filter(a -> !a.isDeleted())
                .findAny()
                .orElseThrow(() -> new ResourceNotFoundException("Album", id));
    }

    @Override
    public List<Album> findByBabyId(Long babyId) {
        return data.stream()
                .filter(a -> a.babyId().equals(babyId))
                .filter(a -> !a.isDeleted())
                .toList();
    }

    @Override
    public List<Album> findByBabyId(Long babyId, CursorRequest cursorRequest) {
        if (cursorRequest.hasKey()) {
            return data.stream()
                    .filter(a -> a.babyId().equals(babyId))
                    .filter(a -> !a.isDeleted())
                    .filter(a -> a.id() < cursorRequest.key())
                    .sorted(Comparator.comparing(Album::id).reversed())
                    .limit(cursorRequest.size())
                    .toList();
        }

        return data.stream()
                .filter(a -> a.babyId().equals(babyId))
                .filter(a -> !a.isDeleted())
                .sorted(Comparator.comparing(Album::id).reversed())
                .limit(cursorRequest.size())
                .toList();
    }

    @Override
    public List<Album> findByBabyIdAndKeyNameIn(Long babyId, Set<String> keyName) {
        return null;
    }
}
